//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.03.01 at 12:36:44 PM CET 
//


package io.github.agroportal.ncboproxy.servlet.handlers.omtdsharemeta.xsdmodel;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for processMode.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="processMode">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;maxLength value="20"/>
 *     &lt;enumeration value="manual"/>
 *     &lt;enumeration value="automatic"/>
 *     &lt;enumeration value="mixed"/>
 *     &lt;enumeration value="interactive"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "processMode")
@XmlEnum
public enum ProcessMode {


    /**
     * For processes performed only manually, without automatic means or aids
     * 
     */
    @XmlEnumValue("manual")
    MANUAL("manual"),

    /**
     * For processes performed only with automatic means or aids
     * 
     */
    @XmlEnumValue("automatic")
    AUTOMATIC("automatic"),

    /**
     * For processes performed in a mixed way, using manual and automatic means
     * 
     */
    @XmlEnumValue("mixed")
    MIXED("mixed"),

    /**
     * For processes performed interactively
     * 
     */
    @XmlEnumValue("interactive")
    INTERACTIVE("interactive");
    private final String value;

    ProcessMode(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ProcessMode fromValue(String v) {
        for (ProcessMode c: ProcessMode.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
